Absolutely, here’s the optimized Replit AI prompt in raw plain text mode – fully copy-paste ready, with concrete examples added after each instruction to prevent hallucination or jumbled layout.

This version follows Replit AI’s best prompt engineering practices:
	•	Use bullet points or numbered steps
	•	Provide at least two examples per instruction
	•	Avoid vague instructions
	•	Ensure each instruction is actionable and clear in outcome

⸻

🚀 REPLIT AI PROMPT: COPY & PASTE DIRECTLY BELOW INTO REPLIT

⸻

Build a full-stack React + TypeScript + Tailwind CSS web app called MoodBite.

This is a voice-first, multilingual, AI-powered food ordering advisor that feels like having your personal food buddy.

⸻

🧱 Project Overview

MoodBite must:
	1.	Talk to the user like a personal food concierge (via voice).
	•	Example: “Hey, craving something spicy tonight?”
	•	Example: “Need a cozy dish for a sad day?”
	2.	Take voice input and fallback to typed input in noisy environments via a 3D floating modal on mic long-press.
	•	Example: Long-press triggers an input modal with a submit button.
	•	Example: User says “I want something spicy” → input parsed to apply spicy + nonVeg filter.
	3.	Dynamically apply filters and sorting logic:
	•	Filters: veg, egg, nonVeg
	•	Sorting: Relevance, Rating, Delivery Time
	•	Example: “Show me the best rated egg dishes”
	•	Example: “Fastest delivery for non-veg”
	4.	Store 100+ dish records in a mock file called mockData.ts in /src/data.
	•	Fields: id, dishName, restaurant, eta, rating, price, category, image
	•	Example:

{
  id: 1,
  dishName: "Spicy Chicken Tikka",
  restaurant: "Grill Master",
  eta: "25",
  rating: 4.5,
  price: "₹350",
  category: "nonVeg",
  image: "https://source.unsplash.com/400x300/?chicken"
}


	5.	Show 6 items first, then load 20+ on scroll or click of “Show More”
	•	Example: First view shows 6 cards with dish image, name, ETA, and price
	•	Example: Scroll event or button click appends more dishes from mockData
	6.	Display an emoji Mood Indicator above results
	•	Example: Mood “spicy” → show 🔥
	•	Example: Mood “tired” → show 😴
	7.	Maintain user preferences across sessions using localStorage
	•	Example: Previously chosen filters persist on reload
	•	Example: Previously detected mood is remembered for suggestions

⸻

📂 Folder Structure (exactly follow this)

/src
  /app
    page.tsx
  /components
    Header.tsx
    VoiceInput.tsx
    MoodBiteApp.tsx
    FilterSection.tsx
    ResultsSection.tsx
    Footer.tsx
  /data
    mockData.ts
  /styles
    globals.css
tailwind.config.js
postcss.config.js
package.json



⸻

🧠 Component Responsibilities
	1.	Header.tsx: Branding, navigation (optional)
	•	Example: Shows “MoodBite” title and “About” button
	•	Example: Fixed at top with Tailwind styles
	2.	VoiceInput.tsx: Voice recording and fallback to 3D input modal
	•	Example: Mic button toggles Web Speech API
	•	Example: Long-press triggers <input> modal with styled prompt
	3.	FilterSection.tsx: Sorting and diet filters (Veg/Egg/NonVeg)
	•	Example: Dropdown for sorting
	•	Example: Toggle buttons for veg/egg/nonveg filters
	4.	ResultsSection.tsx: Render 6+ results based on state
	•	Example: Cards with dishName, price, restaurant, rating, ETA
	•	Example: Uses data from /data/mockData.ts
	5.	Footer.tsx: Display bottom banner
	•	Example: Static text “Built in 48hrs with GPT + ONDC”
	•	Example: Add feedback button (optional)

⸻

🎤 Voice Logic Requirements

Use Web Speech API in VoiceInput.tsx.
	•	On mic click: toggle isListening, show animation
	•	Parse text to extract intent
	•	Example: “I want spicy food” → mood = 🔥, filter = nonVeg
	•	Example: “I want quick food” → sort by delivery time
	•	On long-press: open floating modal
	•	Modal = fixed div with input field and submit
	•	Mobile-first optimized

⸻

🧱 State Management (React Hooks)

Use useState and useEffect to handle:
	•	transcription (from voice or typed input)
	•	filters: { veg, egg, nonVeg }
	•	sortPreference: "Relevance" | "Rating" | "DeliveryTime"
	•	mood: "🔥" | "😴" | "😋" | "😔"
	•	visibleItems: show more logic
	•	Store filters, sortPreference, and mood in localStorage
	•	Example: useEffect(() => localStorage.setItem('filters', JSON.stringify(filters)), [filters])

⸻

📦 Tailwind UI Guidelines
	•	Use Tailwind CSS everywhere
	•	Cards must use:
	•	Shadow
	•	Rounded corners
	•	Hover scaling
	•	Responsive text
	•	Modal must use:
	•	Fixed top-left with blur background
	•	Animation on open
	•	Centered input

⸻

📊 Mock Database Examples

File: mockData.ts

Add 100+ entries like:

export const foodItems = [
  {
    id: 1,
    dishName: "Spicy Chicken Tikka",
    restaurant: "Tandoori Nights",
    eta: "25",
    rating: 4.5,
    price: "₹350",
    category: "nonVeg",
    image: "https://source.unsplash.com/400x300/?chicken"
  },
  {
    id: 2,
    dishName: "Egg Curry Masala",
    restaurant: "Andaa Express",
    eta: "30",
    rating: 4.2,
    price: "₹220",
    category: "egg",
    image: "https://source.unsplash.com/400x300/?egg-curry"
  }
  // + 98 more
];



⸻

💬 Conversation UX Examples
	1.	App: “Hey! What’s the mood today? Feeling spicy, cozy, or adventurous?”
	2.	User (voice): “I’m super hungry and tired”
	3.	System:
	•	Mood: 😴
	•	Filters: Show comforting dishes
	•	Sort by: Delivery Time
	•	Message: “Got it! You need a hug in a bowl 🍜”

⸻

📌 Post-Setup Task

Once generation completes:
	•	Autostart app on port 3000 or 5173
	•	Show voice assistant UI on Hero section
	•	Responsive layout for mobile, tablet, and desktop

⸻

This app should feel like Swiggy + Siri had a child raised on good UX and spice. Now build it.

---

## ✅ Next Steps After Pasting Prompt in Replit

1. Wait till Replit AI generates all files.
2. Manually verify the folder structure.
3. Add **your own 100+ dishes** in `mockData.ts`.
4. Hit “Run” and your app will launch on a Replit-provided URL.
5. Celebrate like it’s IPO day.

Let me know if you want a **pre-made `mockData.ts`** or the floating modal logic now. We can make this smoother than butter chicken. 🧈🔥